unit MainFrm;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.MySQL,
  FireDAC.Phys.MySQLDef, FireDAC.VCLUI.Wait, Data.DB, FireDAC.Comp.Client,
  Vcl.StdCtrls;

type
  TForm1 = class(TForm)
    FDConnection1: TFDConnection;
    Button1: TButton;
    procedure FormCreate(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure Button1Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

implementation

uses
  MVCFramework.ActiveRecord, EntitiesVCLU;

{$R *.dfm}


procedure TForm1.Button1Click(Sender: TObject);
var
  lCustomer: TCustomer;
  lCustID: Integer;
begin
  lCustomer := TCustomer.Create;
  try
    lCustomer.FirstName := 'Daniele';
    lCustomer.LastName := 'Teti';
    lCustomer.DateOfBirth := EncodeDate(1979, 11, 4);
    {let's insert a new customer}
    lCustomer.Insert;
    {retrieve the autogenerated primary key of the newly inserted customer}
    lCustID := lCustomer.ID;
  finally
    lCustomer.Free;
  end;

  {load the customer by primary key}
  lCustomer := TMVCActiveRecord.GetByPK<TCustomer>(lCustID);
  try
    {update a fields}
    lCustomer.Note := 'It''s a developer and a poor guitarist...';
    {update the customer}
    lCustomer.Update;
  finally
    lCustomer.Free;
  end;

  {try to insert an invalid customer}
  lCustomer := TCustomer.Create;
  try
    lCustomer.FirstName := ''; //This will raise a validation exception
    lCustomer.LastName := 'Doe';
    lCustomer.DateOfBirth := EncodeDate(1979, 11, 4);
    {automatic validation happened here - expect an exception}
    lCustomer.Insert;
  finally
    lCustomer.Free;
  end;
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
  ActiveRecordConnectionsRegistry.AddDefaultConnection(FDConnection1);
end;

procedure TForm1.FormDestroy(Sender: TObject);
begin
  ActiveRecordConnectionsRegistry.RemoveDefaultConnection;
end;

end.
