unit EntitiesU;

interface

uses
  MVCFramework.Serializer.Commons,
  MVCFramework.ActiveRecord,
  MVCFramework.Nullables,
  MVCFramework.Commons,
  MVCFramework.Swagger.Commons,
  MVCFramework.SQLGenerators.MySQL,
  System.Generics.Collections;

type
  {Entity Base}
  TEntityBase = class abstract(TMVCActiveRecord)
  protected
    [MVCTableField('ID', [foPrimaryKey, foAutoGenerated])]
    FID: Integer;
  public
    property ID: Integer read FID write FID;
  end;

  {Person Entity Base}
  TPersonEntityBase = class abstract(TEntityBase)
  private
    [MVCTableField('DOB')]
    FDateOfBirth: TDate;
  public
    property DateOfBirth: TDate read fDateOfBirth write fDateOfBirth;
  end;

  {User Entity}
  [MVCNameCase(ncSnakeCase)]
  [MVCTable('user')]
  TUser = class(TEntityBase)
  private
    [MVCTableField('DELETED')]
    FDeleted: boolean;
    [MVCTableField('EMAIL')]
    FEmail: string;
    [MVCTableField('LAST_LOGIN')]
    FLastLogin: NullableTDateTime;
  public
    [MVCDoNotSerialize]
    [MVCDoNotDeSerialize]
    property Deleted: boolean read FDeleted write FDeleted;
    property Email: string read FEmail write FEmail;
    [MVCDoNotDeSerialize]
    property LastLogin: NullableTDateTime read FLastLogin write FLastLogin;
    //constructor Create; override;
  end;

  {TUserWithPassword Entity}
  [MVCNameCase(ncSnakeCase)]
  [MVCTable('user')]
  [MVCEntityActions([eaCreate, eaUpdate, eaRetrieve])]
  TUserWithPassword = class(TUser)
  private
    { this field is not retrieve and not stored from/to the database }
    FPassword: string;
    [MVCTableField('PWD', [foWriteOnly])]
    FHashedPwd: string;
    [MVCTableField('SALT', [foWriteOnly])]
    FSalt: string;
    FIterationsCount: Integer;
    function GetPassword: string;
    procedure SetPassword(const ANewPassword: string);
  protected
    procedure OnBeforeInsertOrUpdate; override;
    procedure OnValidation(const AEntityAction: TMVCEntityAction); override;
  public
    [MVCDoNotSerialize]
    [MVCNameAs('pwd')]
    property Password: string read GetPassword write SetPassword;
  end;

  {TUserPasswordChecker Entity}
  [MVCNameCase(ncSnakeCase)]
  [MVCTable('user')]
  [MVCEntityActions([eaCreate, eaUpdate, eaRetrieve])]
  TUserPasswordChecker = class(TUser)
  private
    [MVCTableField('PWD')]
    FHashedPwd: string;
    [MVCTableField('SALT')]
    FSalt: string;
  public
    function IsValid(const APassword: string): boolean;
  end;

  {Customer Entity}
  [MVCNameCase(ncSnakeCase)]
  [MVCTable('customer')]
  TCustomer = class(TPersonEntityBase)
  private
    [MVCTableField('FIRST_NAME')]
    FFirstName: string;
    [MVCTableField('LAST_NAME')]
    FLastName: string;
    [MVCTableField('NOTE')]
    FNote: NullableString;
  public
    property FirstName: string read FFirstName write FFirstName;
    property LastName: string read FLastName write FLastName;
    property Note: NullableString read FNote write FNote;
  end;

  {Book Ref Entity}
  [MVCNameCase(ncSnakeCase)]
  [MVCTable('book')]
  TBookRef = class(TEntityBase)
  private
    FLinks: TMVCStringDictionary;
    [MVCTableField('PUB_YEAR')]
    FPubYear: NullableUInt16;
    [MVCTableField('TITLE')]
    FTitle: string;
    function GetLinks: TMVCStringDictionary;
  public
    property Links: TMVCStringDictionary read GetLinks;
    property PubYear: NullableUInt16 read FPubYear write FPubYear;
    property Title: string read fTitle write fTitle;
  end;

  {Author Entity}
  [MVCNameCase(ncSnakeCase)]
  [MVCTable('author')]
  TAuthor = class(TPersonEntityBase)
  private
    FBooks: TEnumerable<TBookRef>;
    [MVCSwagProperty()]
    [MVCTableField('FULL_NAME')]
    FFullName: string;
    function GetBooks: TEnumerable<TBookRef>;
  public
    property FullName: string read FFullName write FFullName;
    {book is an enumerable of TBookRef, a lightweight version of TBook}
    property Books: TEnumerable<TBookRef> read GetBooks;
  end;

  {Book Entity}
  [MVCNameCase(ncSnakeCase)]
  [MVCTable('book')]
  TBook = class(TEntityBase)
  private
    [MVCTableField('AUTHOR_ID')]
    FAuthorID: Integer;
    [MVCTableField('PUB_YEAR')]
    FPubYear: NullableUInt16;
    [MVCTableField('TITLE')]
    FTitle: string;
  public
    property AuthorID: Integer read FAuthorID write FAuthorID;
    property PubYear: NullableUInt16 read FPubYear write FPubYear;
    property Title: string read FTitle write FTitle;
  end;

  {Book and Author}
  [MVCNameCase(ncSnakeCase)]
  [MVCTable('book')]
  TBookAndAuthor = class(TEntityBase)
  private
    FAuthor: string;
    [MVCTableField('AUTHOR_ID')]
    FAuthorID: Integer;
    [MVCTableField('PUB_YEAR')]
    FPubYear: NullableUInt16;
    [MVCTableField('TITLE')]
    FTitle: string;
    function GetAuthor: string;
  public
    property Author: string read GetAuthor write FAuthor;
    property AuthorID: Integer read FAuthorID write FAuthorID;
    property PubYear: NullableUInt16 read FPubYear write FPubYear;
    property Title: string read FTitle write FTitle;
  end;

  {Lending Entity}
  [MVCNameCase(ncSnakeCase)]
  [MVCTable('lending')]
  TLending = class(TEntityBase)
  private
    [MVCTableField('BOOK_ID')]
    FBookID: integer;
    [MVCTableField('CUSTOMER_ID')]
    FCustomerID: Integer;
    [MVCTableField('LENDING_END')]
    FLendingEnd: NullableTDateTime;
    [MVCTableField('LENDING_END_USER_ID')]
    FLendingEndUserID: NullableInt64;
    [MVCTableField('LENDING_START')]
    FLendingStart: NullableTDateTime;
    [MVCTableField('LENDING_START_USER_ID')]
    FLendingStartUserID: NullableInt64;
  public
    property BookID: Integer
      read FBookID write FBookID;
    property CustomerID: Integer
      read FCustomerID write FCustomerID;
    property LendingEnd: NullableTDateTime
      read FLendingEnd write FLendingEnd;
    property LendingEndUserID: NullableInt64
      read FLendingEndUserID write FLendingEndUserID;
    property LendingStart: NullableTDateTime
      read FLendingStart write FLendingStart;
    property LendingStartUserID: NullableInt64
      read FLendingStartUserID write FLendingStartUserID;
  end;

  {Lending Ref Entity}
  [MVCNameCase(ncSnakeCase)]
  [MVCTable('lending')]
  TLendingRef = class(TEntityBase)
  private
    [MVCTableField('BOOK_ID')]
    FBookID: integer;
    FBookTitle: String;
    [MVCTableField('CUSTOMER_ID')]
    FCustomerID: Integer;
    FCustomerName: String;
    [MVCTableField('LENDING_END')]
    FLendingEnd: NullableTDateTime;
    [MVCTableField('LENDING_END_USER_ID')]
    FLendingEndUserID: NullableInt64;
    [MVCTableField('LENDING_START')]
    FLendingStart: NullableTDateTime;
    [MVCTableField('LENDING_START_USER_ID')]
    FLendingStartUserID: NullableInt64;
    function GetBookTitle: string;
    function GetCustomerName: string;
  public
    property BookID: Integer
      read FBookID write FBookID;
    property BookTitle: string
      read GetBookTitle;
    property CustomerID: Integer
      read FCustomerID write FCustomerID;
    property CustomerName: string
      read GetCustomerName;
    property LendingEnd: NullableTDateTime
      read FLendingEnd write FLendingEnd;
    property LendingEndUserID: NullableInt64
      read FLendingEndUserID write FLendingEndUserID;
    property LendingStart: NullableTDateTime
      read FLendingStart write FLendingStart;
    property LendingStartUserID: NullableInt64
      read FLendingStartUserID write FLendingStartUserID;
  end;

implementation

uses
  System.SysUtils, CommonsU, AuthServiceU, System.Math;

{ TBookRef }
function TBookRef.GetLinks: TMVCStringDictionary;
var
  LDict: TMVCStringDictionary;
begin
  LDict := TMVCStringDictionary.Create;
  LDict.Add(HATEOAS._TYPE, TMVCMediaType.APPLICATION_JSON);
  LDict.Add(HATEOAS.HREF, '/api/books/' + IntToStr(Self.ID));
  LDict.Add(HATEOAS.REL, 'self');
  Result := LDict;
end;

{ TAuthor }
function TAuthor.GetBooks: TEnumerable<TBookRef>;
begin
  if FBooks = nil then
  begin
    FBooks := TMVCActiveRecord.Where<TBookRef>('author_id = ?', [ID]);
    AddChildren(fBooks);
  end;
  Result := FBooks;
end;

{ TUserWithPassword }

function TUserWithPassword.GetPassword: string;
begin
  Result := 'password is hidden';
end;

procedure TUserWithPassword.OnBeforeInsertOrUpdate;
begin
  inherited;
  FSalt := TGUID.NewGuid.ToString;
  fHashedPwd := GetPasswordHash(fSalt, fPassword);
end;

procedure TUserWithPassword.OnValidation(const AEntityAction: TMVCEntityAction);
begin
  inherited;
  if FPassword.IsEmpty then
  begin
    raise Exception.Create('Password cannot be empty');
  end;
end;

procedure TUserWithPassword.SetPassword(const ANewPassword: string);
begin
  FPassword := ANewPassword;
end;

{ TUserPasswordChecker }

function TUserPasswordChecker.IsValid(const APassword: string): boolean;
begin
  Result := GetPasswordHash(FSalt, APassword) = FHashedPwd;
end;

{ TBookAndAuthor }

function TBookAndAuthor.GetAuthor: string;
var
  LAuthor: TAuthor;
begin
  try
    LAuthor := TMVCActiveRecord.GetByPK<TAuthor>(AuthorID);
    Result := LAuthor.FullName;
  except
    Result := '';
  end;
end;

{ TLendingRef }

function TLendingRef.GetBookTitle: string;
var
  LBook: TBook;
begin
  try
    LBook := TMVCActiveRecord.GetByPK<TBook>(BookID);
    Result := LBook.Title;
  except
    Result := '';
  end;
end;

function TLendingRef.GetCustomerName: string;
var
  LCustomer: TCustomer;
begin
  try
    LCustomer := TMVCActiveRecord.GetByPK<TCustomer>(CustomerID);
    Result := LCustomer.FirstName + ' ' +  LCustomer.LastName;
  except
    Result := '';
  end;
end;

end.
