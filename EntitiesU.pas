unit EntitiesU;

interface

uses
  MVCFramework.Serializer.Commons,
  MVCFramework.ActiveRecord,
  MVCFramework.Nullables,
  MVCFramework.Commons,
  MVCFramework.Swagger.Commons,
  MVCFramework.SQLGenerators.MySQL,
  System.Generics.Collections;

type
  {Entity Base}
  TEntityBase = class abstract(TMVCActiveRecord)
  protected
    [MVCTableField('ID', [foPrimaryKey, foAutoGenerated])]
    fID: Integer;
  public
    property ID: Integer read fID write fID;
  end;

  {Person Entity Base}
  TPersonEntityBase = class abstract(TEntityBase)
  private
    [MVCTableField('DOB')]
    fDateOfBirth: TDate;
  public
    property DateOfBirth: TDate read fDateOfBirth write fDateOfBirth;
  end;

  {User Entity}
  [MVCNameCase(ncSnakeCase)]
  [MVCTable('user')]
  TUser = class(TEntityBase)
  private
    [MVCTableField('DELETED')]
    fDeleted: boolean;
    [MVCTableField('EMAIL')]
    fEmail: string;
    [MVCTableField('LAST_LOGIN')]
    fLastLogin: NullableTDateTime;
  public
    [MVCDoNotSerialize]
    [MVCDoNotDeSerialize]
    property Deleted: boolean read fDeleted write fDeleted;
    property Email: string read fEmail write fEmail;
    [MVCDoNotDeSerialize]
    property LastLogin: NullableTDateTime read fLastLogin write fLastLogin;
    //constructor Create; override;
  end;

  {TUserWithPassword Entity}
  [MVCNameCase(ncSnakeCase)]
  [MVCTable('user')]
  [MVCEntityActions([eaCreate, eaUpdate, eaRetrieve])]
  TUserWithPassword = class(TUser)
  private
    { this field is not retrieve and not stored from/to the database }
    fPassword: string;
    [MVCTableField('PWD', [foWriteOnly])]
    fHashedPwd: string;
    [MVCTableField('SALT', [foWriteOnly])]
    fSalt: string;
    fIterationsCount: Integer;
    function GetPassword: string;
    procedure SetPassword(const NewPassword: string);
  protected
    procedure OnBeforeInsertOrUpdate; override;
    procedure OnValidation(const EntityAction: TMVCEntityAction); override;
  public
    [MVCDoNotSerialize]
    [MVCNameAs('pwd')]
    property Password: string read GetPassword write SetPassword;
  end;

  {TUserPasswordChecker Entity}
  [MVCNameCase(ncSnakeCase)]
  [MVCTable('user')]
  [MVCEntityActions([eaCreate, eaUpdate, eaRetrieve])]
  TUserPasswordChecker = class(TUser)
  private
    [MVCTableField('PWD')]
    fHashedPwd: string;
    [MVCTableField('SALT')]
    fSalt: string;
  public
    function IsValid(const APassword: string): boolean;
  end;

  {Customer Entity}
  [MVCNameCase(ncSnakeCase)]
  [MVCTable('customer')]
  TCustomer = class(TPersonEntityBase)
  private
    [MVCTableField('FIRST_NAME')]
    fFirstName: string;
    [MVCTableField('LAST_NAME')]
    fLastName: string;
    [MVCTableField('NOTE')]
    fNote: NullableString;
  public
    property FirstName: string read fFirstName write fFirstName;
    property LastName: string read fLastName write fLastName;
    property Note: NullableString read fNote write fNote;
  end;

  {Book Ref Entity}
  [MVCNameCase(ncSnakeCase)]
  [MVCTable('book')]
  TBookRef = class(TEntityBase)
  private
    fLinks: TMVCStringDictionary;
    [MVCTableField('PUB_YEAR')]
    fPubYear: NullableUInt16;
    [MVCTableField('TITLE')]
    fTitle: string;
    function GetLinks: TMVCStringDictionary;
  public
    property Links: TMVCStringDictionary read GetLinks;
    property PubYear: NullableUInt16 read fPubYear write fPubYear;
    property Title: string read fTitle write fTitle;
  end;

  {Author Entity}
  [MVCNameCase(ncSnakeCase)]
  [MVCTable('author')]
  TAuthor = class(TPersonEntityBase)
  private
    fBooks: TEnumerable<TBookRef>;
    [MVCSwagProperty()]
    [MVCTableField('FULL_NAME')]
    fFullName: string;
    function GetBooks: TEnumerable<TBookRef>;
  public
    property FullName: string read fFullName write fFullName;
    {book is an enumerable of TBookRef, a lightweight version of TBook}
    [MVCSwagJSONSchemaField('books', 'Author books', False, True)]
    property Books: TEnumerable<TBookRef> read GetBooks;
  end;

  {Book Entity}
  [MVCNameCase(ncSnakeCase)]
  [MVCTable('book')]
  TBook = class(TEntityBase)
  private
    [MVCTableField('AUTHOR_ID')]
    fAuthorID: Integer;
    [MVCTableField('PUB_YEAR')]
    fPubYear: NullableUInt16;
    [MVCTableField('TITLE')]
    fTitle: string;
  public
    property AuthorID: Integer read fAuthorID write fAuthorID;
    property PubYear: NullableUInt16 read fPubYear write fPubYear;
    property Title: string read fTitle write fTitle;
  end;

  {Book and Author}
  [MVCNameCase(ncSnakeCase)]
  [MVCTable('book')]
  TBookAndAuthor = class(TEntityBase)
  private
    fAuthor: string;
    [MVCTableField('AUTHOR_ID')]
    fAuthorID: Integer;
    [MVCTableField('PUB_YEAR')]
    fPubYear: NullableUInt16;
    [MVCTableField('TITLE')]
    fTitle: string;
    function GetAuthor: string;
  public
    property Author: string read GetAuthor write fAuthor;
    property AuthorID: Integer read fAuthorID write fAuthorID;
    property PubYear: NullableUInt16 read fPubYear write fPubYear;
    property Title: string read fTitle write fTitle;
  end;

  {Lending Entity}
  [MVCNameCase(ncSnakeCase)]
  [MVCTable('lending')]
  TLending = class(TEntityBase)
  private
    [MVCTableField('BOOK_ID')]
    fBookID: integer;
    [MVCTableField('CUSTOMER_ID')]
    fCustomerID: Integer;
    [MVCTableField('LENDING_END')]
    fLendingEnd: NullableTDateTime;
    [MVCTableField('LENDING_END_USER_ID')]
    fLendingEndUserID: NullableInt64;
    [MVCTableField('LENDING_START')]
    fLendingStart: NullableTDateTime;
    [MVCTableField('LENDING_START_USER_ID')]
    fLendingStartUserID: NullableInt64;
  public
    property BookID: Integer
      read fBookID write fBookID;
    property CustomerID: Integer
      read fCustomerID write fCustomerID;
    property LendingEnd: NullableTDateTime
      read fLendingEnd write fLendingEnd;
    property LendingEndUserID: NullableInt64
      read fLendingEndUserID write fLendingEndUserID;
    property LendingStart: NullableTDateTime
      read fLendingStart write fLendingStart;
    property LendingStartUserID: NullableInt64
      read fLendingStartUserID write fLendingStartUserID;
  end;

  {Lending Ref Entity}
  [MVCNameCase(ncSnakeCase)]
  [MVCTable('lending')]
  TLendingRef = class(TEntityBase)
  private
    [MVCTableField('BOOK_ID')]
    fBookID: integer;
    fBookTitle: String;
    [MVCTableField('CUSTOMER_ID')]
    fCustomerID: Integer;
    fCustomerName: String;
    [MVCTableField('LENDING_END')]
    fLendingEnd: NullableTDateTime;
    [MVCTableField('LENDING_END_USER_ID')]
    fLendingEndUserID: NullableInt64;
    [MVCTableField('LENDING_START')]
    fLendingStart: NullableTDateTime;
    [MVCTableField('LENDING_START_USER_ID')]
    fLendingStartUserID: NullableInt64;
    function GetBookTitle: string;
    function GetCustomerName: string;
  public
    property BookID: Integer
      read fBookID write fBookID;
    property BookTitle: string
      read GetBookTitle;
    property CustomerID: Integer
      read fCustomerID write fCustomerID;
    property CustomerName: string
      read GetCustomerName;
    property LendingEnd: NullableTDateTime
      read fLendingEnd write fLendingEnd;
    property LendingEndUserID: NullableInt64
      read fLendingEndUserID write fLendingEndUserID;
    property LendingStart: NullableTDateTime
      read fLendingStart write fLendingStart;
    property LendingStartUserID: NullableInt64
      read fLendingStartUserID write fLendingStartUserID;
  end;

implementation

uses
  System.SysUtils, CommonsU, AuthServiceU, System.Math;

{ TBookRef }
function TBookRef.GetLinks: TMVCStringDictionary;
var
  lDict: TMVCStringDictionary;
begin
  lDict := TMVCStringDictionary.Create;
  lDict.Add(HATEOAS._TYPE, TMVCMediaType.APPLICATION_JSON);
  lDict.Add(HATEOAS.HREF, '/api/books/' + IntToStr(Self.ID));
  lDict.Add(HATEOAS.REL, 'self');
  Result := lDict;
end;

{ TAuthor }
function TAuthor.GetBooks: TEnumerable<TBookRef>;
begin
  if fBooks = nil then
  begin
    fBooks := TMVCActiveRecord.Where<TBookRef>('author_id = ?', [ID]);
    AddChildren(fBooks);
  end;
  Result := fBooks;
end;

{ TUserWithPassword }

function TUserWithPassword.GetPassword: string;
begin
  Result := 'password is hidden';
end;

procedure TUserWithPassword.OnBeforeInsertOrUpdate;
begin
  inherited;
  fSalt := TGUID.NewGuid.ToString;
  fHashedPwd := GetPasswordHash(fSalt, fPassword);
end;

procedure TUserWithPassword.OnValidation(const EntityAction: TMVCEntityAction);
begin
  inherited;
  if fPassword.IsEmpty then
  begin
    raise Exception.Create('Password cannot be empty');
  end;
end;

procedure TUserWithPassword.SetPassword(const NewPassword: string);
begin
  fPassword := NewPassword;
end;


{ TUserPasswordChecker }

function TUserPasswordChecker.IsValid(const APassword: string): boolean;
begin
  Result := GetPasswordHash(fSalt, APassword) = fHashedPwd;
end;

{ TBookAndAuthor }

function TBookAndAuthor.GetAuthor: string;
var
  lAuthor: TAuthor;
begin
  try
    lAuthor := TMVCActiveRecord.GetByPK<TAuthor>(Self.AuthorID);
    Result := lAuthor.FullName;
  except
    Result := '';
  end;
end;

{ TLendingRef }

function TLendingRef.GetBookTitle: string;
var
  lBook: TBook;
begin
  try
    lBook := TMVCActiveRecord.GetByPK<TBook>(Self.BookID);
    Result := lBook.Title;
  except
    Result := '';
  end;
end;

function TLendingRef.GetCustomerName: string;
var
  lCustomer: TCustomer;
begin
  try
    lCustomer := TMVCActiveRecord.GetByPK<TCustomer>(Self.CustomerID);
    Result := lCustomer.FirstName + ' ' +  lCustomer.LastName;
  except
    Result := '';
  end;
end;

end.
